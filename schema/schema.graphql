"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""
Tells the service which subscriptions will be published to when this mutation is
called. This directive is deprecated use @aws_susbscribe directive instead.
"""
directive @aws_publish(
  """
  List of subscriptions which will be published to when this mutation is called.
  """
  subscriptions: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an OIDC token.
"""
directive @aws_oidc on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Cognito User Pools token.
"""
directive @aws_cognito_user_pools(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

"""Directs the schema to enforce authorization on a field"""
directive @aws_auth(
  """List of cognito user pool groups which have access on this field"""
  cognito_groups: [String]
) on FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by an API key.
"""
directive @aws_api_key on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by sigv4 signing.
"""
directive @aws_iam on OBJECT | FIELD_DEFINITION

"""
Tells the service this field/object has access authorized by a Lambda Authorizer.
"""
directive @aws_lambda on OBJECT | FIELD_DEFINITION

"""Tells the service which mutation triggers this subscription."""
directive @aws_subscribe(
  """
  List of mutations which will trigger this subscription when they are called.
  """
  mutations: [String]
) on FIELD_DEFINITION

type AdsTargeting {
  behavioral: BehavioralTargeting
  contextual: ContextualTargeting
}

interface Article {
  id: ID!
}

type ArticleBlogEdge implements Edge & ArticleEdge {
  node: Blog!
}

interface ArticleEdge {
  node: Article!
}

type ArticleInterviewEdge implements Edge & ArticleEdge {
  node: Interview!
}

type Award {
  awardedAt: Float
  category: String
  designation: AwardDesignation
  hasWon: Boolean @deprecated(reason: "Use designation instead.")
  name: String
  webUrl: String
}

enum AwardDesignation {
  NOMINEE
  VOTING_IN_PROGRESS
  WINNER
}

type BehavioralTargeting {
  adGroupNames: [String]
  age: String
  authors: [String]
  blockedAuthors: [String]
  gender: String
  genres: [String]
  userTargetingSettings: UserTargetingSettings
}

type BlockedUsersConnection implements Connection {
  edges: [BlockedUsersEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type BlockedUsersEdge implements Edge {
  node: User!
}

input BlockUserInput {
  id: ID!
}

type BlockUserPayload {
  isSuccessful: Boolean!
}

type Blog implements Article & Node {
  body: String!
  commentsCount: Int
  createdAt: Float
  id: ID!
  imageUrl: String!
  likesCount: Int
  publishedAt: Float
  title: String
  updatedAt: Float
  webUrl: String!
}

type Book implements Node {
  bookEditLinks: [ContextualEditLink]
  bookGenres: [BookGenre]
  bookLists(paginationInput: PaginationInput): BookListsConnection
  bookSeries: [BookSeries]
  description(stripped: Boolean): String
  details: BookDetails
  featureFlags: FeatureFlags
  id: ID!
  imageUrl: String
  legacyId: Int!
  links(rto: String): BookLinks
  primaryContributorEdge: BookContributorEdge
  reviewEditUrl: String
  reviews(filters: BookReviewsFilterInput, pagination: PaginationInput): BookReviewsConnection @deprecated(reason: "To be removed, use 'Work.reviews'")
  secondaryContributorEdges: [BookContributorEdge]
  similarBooks(pagination: PaginationInput): SimilarBooksConnection
  socialReviews(pagination: PaginationInput): BookReviewsConnection @deprecated(reason: "Use 'Query.getWorkSocialReviews'")
  socialSignals(shelfStatus: [ShelfStatus]!): [SocialSignal]
  stats: BookOrWorkStats
  title: String
  titleComplete: String
  titlePrimary: String
  viewerShelving: Shelving
  webUrl: String
  work: Work
}

type BookAd implements NativeAd {
  book: Book!
  customDescription: String
  id: ID!
  viewerNotInterested: Boolean
}

type BookContributorEdge implements Edge {
  node: Contributor!
  role: String
}

type BookDetails {
  asin: String
  format: String
  isbn: String
  isbn13: String
  language: Language
  numPages: Int
  officialUrl: String
  publicationTime: Float
  publisher: String
}

type BookGenre {
  genre: Genre!
}

type BookLink implements Link {
  name: String!
  ref: String
  url: String!
}

type BookLinks {
  libraryLinks: [BookLink!]!
  overflowPageUrl: String!
  primaryAffiliateLink: Link
  secondaryAffiliateLinks: [BookLink!]!
}

type BookList implements Node {
  books(paginationInput: PaginationInput): BookListBooksConnection
  commentsCount: Int
  description: String
  id: ID!
  legacyId: Int!
  listBooksCount: Int
  ratingsCount: Int
  ratingsSum: Int
  title: String!
  uri: String!
  userListVotesCount: Int!
}

type BookListBookEdge implements Edge {
  node: Book!
}

type BookListBooksConnection implements Connection {
  edges: [BookListBookEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type BookListEdge implements Edge {
  node: BookList!
}

type BookListsConnection implements Connection {
  edges: [BookListEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type BookOrWorkStats {
  averageRating: Float
  lastReviewAt: Float
  ratingsCount: Int
  ratingsCountDist: [Int]
  ratingsSum: Int
  textReviewsCount: Int
  textReviewsLanguageCounts: [TextReviewLanguageCount]
}

type BookReviewsConnection implements Connection {
  edges: [BookReviewsEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type BookReviewsEdge implements Edge {
  node: Review!
}

input BookReviewsFilterInput {
  languageCode: String
  ratingMax: Int
  ratingMin: Int
  resourceId: ID
  resourceType: ReviewFilterResourceType
  searchText: String
  sort: BookReviewsSortOption
}

enum BookReviewsSortOption {
  DEFAULT
  NEWEST
  OLDEST
}

type BooksConnection implements Connection {
  edges: [BooksEdge]
  pageInfo: PageInfo!
  totalCount: Int
  webUrl: String!
}

type BooksEdge implements Edge {
  node: Book!
}

type BookSeries {
  series: Series!
  seriesPlacement: String
  userPosition: String @deprecated(reason: "Use `seriesPlacement`.")
}

type Character {
  aliases: [String]
  fanshipsCount: Int
  fictionalFlag: Boolean
  name: String
  webUrl: String
}

type Comment implements Node {
  createdAt: String
  creator: User
  id: ID!
  text: String
  updatedAt: String
}

interface Commentable {
  commentCount: Int
  comments(pagination: PaginationInput): ResourceCommentsConnection
}

input CommentFiltersInput {
  resourceId: ID!
}

type CommunityRatingsConnection implements Connection {
  edges: [ReviewEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

interface Connection {
  edges: [Edge]
  pageInfo: PageInfo!
  totalCount: Int
}

type ContextualEditLink {
  confirmationMessage: String
  header: String
  title: String
  url: String
}

type ContextualTargeting {
  adult: Boolean
  resource: String!
  tags: [String]
}

type Contributor implements Node {
  description: String
  followers: ContributorFollowersConnection
  id: ID!
  isGrAuthor: Boolean
  legacyId: Int
  name: String
  profileImageUrl: String
  user: User
  viewerIsFollowing: Boolean
  webUrl: String
  works: ContributorWorksConnection
}

type ContributorFollowersConnection implements Connection {
  edges: [ContributorFollowersEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type ContributorFollowersEdge implements Edge {
  node: User!
}

type ContributorWorksConnection implements Connection {
  edges: [ContributorWorksEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type ContributorWorksEdge implements Edge {
  node: Work!
}

type Country {
  countryCode: String!
  countryName: String!
}

input CreateCommentInput {
  id: ID!
  text: String!
}

type CreateCommentPayload {
  comment: Comment
}

input CreateFlaggingInput {
  flaggedExplanation: String!
  flaggedReason: String!
  resourceId: ID!
  resourceType: String!
}

type CreateFlaggingPayload {
  isSuccessful: Boolean!
}

type DataSourceHealth {
  healthy: Boolean!
  message: String
}

input DeleteCommentInput {
  id: ID!
}

type DeleteCommentPayload {
  isSuccessful: Boolean!
}

input DiscussionInput {
  workId: ID!
}

interface Edge {
  node: Node!
}

type FeaturedItemsConnection {
  edges: [ArticleEdge]
  totalCount: Int
}

type FeaturedKNHCollectionConnection implements Connection {
  edges: [FeaturedKNHCollectionEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type FeaturedKNHCollectionEdge implements Edge {
  blurb: String!
  featureType: KNHFeatureType!
  node: KNHCollection!
}

input FeaturedKNHInput {
  pagination: PaginationInput
  resourceId: ID!
  resourceType: FeaturedKNHResourceType!
}

enum FeaturedKNHResourceType {
  WORK
}

type FeatureFlags {
  hideAds: Boolean
  noIndex: Boolean
  noNewRatings: Boolean
  noNewTextReviews: Boolean
}

type FlexAd implements NativeAd {
  adName: String!
  bodyImageUrl: String!
  bodyTitle: String!
  bodyUrl: String!
  ctaText: String!
  customDescription: String
  customHeaderText: String
  customHeaderTextSignedOut: String
  genres: String
  hasExternalLinks: Boolean
  id: ID!
  showSponsoredLabel: Boolean
  sponsorName: String
  sponsorUrl: String
  viewerNotInterested: Boolean
}

input FollowContributorInput {
  id: ID!
}

type FollowContributorPayload {
  isSuccessful: Boolean!
}

input FollowUserInput {
  legacyUserId: ID!
}

type FollowUserPayload {
  isSuccessful: Boolean!
}

input FriendUserInput {
  friendEmail: Boolean!
  legacyUserId: ID!
}

type FriendUserPayload {
  isSuccessful: Boolean!
}

type Genre implements Node {
  id: ID!
  name: String!
  webUrl: String
}

type GenreCollection {
  genres: [Genre]!
  pageInfo: PageInfo
  totalCount: Int
}

input GetAdsTargetingInput {
  contextual: GetContextualAdsTargetingInput
}

input GetContextualAdsTargetingInput {
  id: ID
  legacyId: Int
  legacyResourceType: String
}

input GetGiveawaysInput {
  format: GiveawayFormat
  genre: String
  sort: GiveawaySortOption
  workId: ID
}

input GetPageBannerInput {
  id: ID!
  pageName: String!
}

input GetTopListInput {
  location: String!
  name: String!
  period: String!
}

input GetWorksByContributorInput {
  id: ID!
}

input GetWorksForSeriesInput {
  id: ID!
  isPrimary: Boolean
}

type Giveaway implements Node {
  details: GiveawayDetails!
  id: ID!
  legacyId: Int!
  metadata: GiveawayMetadata!
  viewerEntrant: GiveawayEntrant
  webUrl: String
}

type GiveawayDetails {
  book: Book!
  description: String!
  enterGiveawayUrl: String
  format: GiveawayFormat!
  genres: [GiveawayGenre!]!
  numCopiesAvailable: Int!
  numEntrants: Int!
}

type GiveawayEntrant {
  canEnter: Boolean!
  entered: Boolean!
}

enum GiveawayFormat {
  KINDLE
  PRINT
}

type GiveawayGenre {
  name: String!
}

type GiveawayMetadata {
  countries: [Country!]!
  endDate: String!
  listingUser: User
  releaseDate: String
  startDate: String!
}

type GiveawaysConnection implements Connection {
  edges: [GiveawaysEdge]
  errors: [String]
  pageInfo: PageInfo!
  totalCount: Int
}

type GiveawaysEdge implements Edge {
  node: Giveaway!
}

enum GiveawaySortOption {
  ENDING_SOON
  FEATURED
  MOST_REQUESTED
  RECENTLY_LISTED
}

type HomeWidget implements Node {
  id: ID!
  metadata: HomeWidgetMetadataMap
  overflowUrl: String
  overflowUrlText: String
  recommendations: [Edge]
  reftag: String
  rerankedScore: Float
  score: Float
  strategyId: String!
  subtitle: String
  title: String!
  webUrl: String
  webUrlText: String
}

type HomeWidgetBlogEdge implements HomeWidgetItemEdge & Edge {
  dataType: HomeWidgetDataType
  metadata: [HomeWidgetMetadataMap]
  node: Blog!
  score: Float
}

type HomeWidgetBook implements Node {
  book: Book
  id: ID!
}

type HomeWidgetBookEdge implements HomeWidgetItemEdge & Edge {
  dataType: HomeWidgetDataType
  metadata: [HomeWidgetMetadataMap]
  node: HomeWidgetBook!
  score: Float
  source: Book
}

enum HomeWidgetDataType {
  BLOG
  BOOK
  INTERVIEW
  WORK
}

type HomeWidgetEdge implements Edge {
  node: HomeWidget!
}

type HomeWidgetInterviewEdge implements HomeWidgetItemEdge & Edge {
  dataType: HomeWidgetDataType
  metadata: [HomeWidgetMetadataMap]
  node: Interview!
  score: Float
}

interface HomeWidgetItemEdge {
  dataType: HomeWidgetDataType
  metadata: [HomeWidgetMetadataMap]
  score: Float
}

type HomeWidgetItemsConnection implements Connection {
  apiVersion: String!
  edges: [HomeWidgetEdge]
  metadata: [HomeWidgetMetadataMap]
  pageInfo: PageInfo!
  totalCount: Int
}

type HomeWidgetMetadataMap {
  key: String
  value: [String]
}

type HomeWidgetReviewEdge implements HomeWidgetItemEdge & Edge {
  dataType: HomeWidgetDataType
  metadata: [HomeWidgetMetadataMap]
  node: Review!
  score: Float
}

type HomeWidgetWorkEdge implements HomeWidgetItemEdge & Edge {
  dataType: HomeWidgetDataType
  metadata: [HomeWidgetMetadataMap]
  node: Work!
  score: Float
}

type Interview implements Article & Node {
  author: Contributor
  body: String!
  commentsCount: Int
  createdAt: Float
  excerpt: String
  id: ID!
  imageUrl: String!
  interviewAt: Float
  likesCount: Int
  publishedAt: Float
  title: String
  updatedAt: Float
  webUrl: String!
  work: Work
}

type KindleLink implements Link {
  ebookPrice: String
  kuEligible: Boolean
  name: String!
  primeEligible: Boolean
  ref: String
  url: String!
}

type KNHCollection implements Node {
  book: Book
  creator: User
  id: ID!
  sharedCount: Int
  sharedHighlightCount: Int
  sharedNoteCount: Int
  webUrl: String
}

enum KNHFeatureType {
  AUTHOR
  NOTABLE_READER
}

type Language {
  isoLanguageCode: String
  name: String
}

type LegacyGiveaway {
  giveaway: Giveaway!
  id: ID!
}

interface Likable {
  id: ID!
  likeCount: Int
  viewerHasLiked: Boolean
}

input LikeUnlikeInput {
  id: ID!
}

type LikeUnlikePayload {
  isSuccessful: Boolean!
}

interface Link {
  name: String!
  ref: String
  url: String!
}

input MarkBookNotInterestedInput {
  bookId: ID!
}

type MarkBookNotInterestedPayload {
  isSuccessful: Boolean!
}

type Mutation {
  blockUser(input: BlockUserInput!): BlockUserPayload
  createComment(input: CreateCommentInput): CreateCommentPayload
  createFlagging(input: CreateFlaggingInput!): CreateFlaggingPayload
  deleteComment(input: DeleteCommentInput): DeleteCommentPayload
  followContributor(input: FollowContributorInput!): FollowContributorPayload
  followUser(input: FollowUserInput!): FollowUserPayload
  friendUser(input: FriendUserInput!): FriendUserPayload
  like(input: LikeUnlikeInput!): LikeUnlikePayload
  markBookNotInterested(input: MarkBookNotInterestedInput!): MarkBookNotInterestedPayload
  rateBook(input: RateBookInput!): RateBookPayload
  shelveBook(input: ShelveBookInput!): ShelveBookPayload
  tagBook(input: TagBookInput!): TagBookPayload
  unblockUser(input: UnblockUserInput!): UnblockUserPayload
  unfollowContributor(input: UnfollowContributorInput!): UnfollowContributorPayload
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload
  unfriendUser(input: UnfriendUserInput!): UnfriendUserPayload
  unlike(input: LikeUnlikeInput!): LikeUnlikePayload
  unmarkBookNotInterested(input: UnmarkBookNotInterestedInput!): UnmarkBookNotInterestedPayload
  unrateBook(input: UnrateBookInput!): UnrateBookPayload
  unshelveBook(input: UnshelveBookInput!): UnshelveBookPayload
}

interface NativeAd {
  customDescription: String
  id: ID!
  viewerNotInterested: Boolean
}

type NavigationQuickLink {
  pageType: NavigationQuickLinkPageType!
  webUrl: String!
}

enum NavigationQuickLinkPageType {
  COMMENTS
  GROUPS
  MYBOOKS
  PROFILE
}

interface Node {
  id: ID!
}

type Notification implements Node {
  actors: NotificationUserConnection
  body: String
  createdAt: String!
  directlyAddressed: Boolean!
  historyMessage: String
  id: ID!
  moreActors: Boolean!
  resourceText: String
  resourceUrl: String
  subjectUrl: String
  viewed: Boolean!
}

type NotificationsConnection implements Connection {
  edges: [NotificationsEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type NotificationsEdge implements Edge {
  node: Notification!
}

type NotificationUserConnection implements Connection {
  edges: [NotificationUserEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type NotificationUserEdge implements Edge {
  node: User!
}

type PageBanner {
  message: String
  type: String
}

type PageInfo {
  hasNextPage: Boolean
  hasPrevPage: Boolean
  nextPageToken: String
  prevPageToken: String
}

input PaginationInput {
  after: String
  before: String
  limit: Int
}

type Places {
  countryCode: String
  countryName: String
  name: String
  webUrl: String
  year: Int
}

enum PositionType {
  PAGE
  PERCENT
}

type Query {
  getAdsTargeting(getAdsTargetingInput: GetAdsTargetingInput): AdsTargeting
  getBasicGenres(pagination: PaginationInput): GenreCollection
  getBlockedUsers(pagination: PaginationInput): BlockedUsersConnection
  getBlog(id: ID!): Blog
  getBook(id: ID!): Book
  getBookByLegacyId(legacyId: Int!): Book
  getBookListsOfBook(id: ID!, paginationInput: PaginationInput): BookListsConnection!
  getComments(filters: CommentFiltersInput!, pagination: PaginationInput): ResourceCommentsConnection
  getEditions(id: ID!, pagination: PaginationInput): BooksConnection
  getFeaturedItems(limit: Int): FeaturedItemsConnection
  getFeaturedKNH(input: FeaturedKNHInput!): FeaturedKNHCollectionConnection
  getGiveawayByLegacyId(legacyId: ID!): LegacyGiveaway
  getGiveaways(getGiveawaysInput: GetGiveawaysInput, pagination: PaginationInput): GiveawaysConnection
  getHomeWidgets: HomeWidgetItemsConnection
  getInterview(id: ID!): Interview
  getNativeAd(id: ID!): NativeAd
  getPageBanner(getPageBannerInput: GetPageBannerInput!): PageBanner
  getRelatedTags(tagName: String!): RelatedTagsList
  getReviews(filters: BookReviewsFilterInput!, pagination: PaginationInput): BookReviewsConnection
  getSchemaHealth: SchemaHealth
  getSearchSuggestions(query: String!): SearchResultsConnection
  getSimilarBooks(id: ID!, pagination: PaginationInput): SimilarBooksConnection
  getSiteHeaderBanner: SiteHeaderBanner
  getSocialReviewsByBook(bookId: ID!, pagination: PaginationInput): BookReviewsConnection @deprecated(reason: "Use 'getWorkSocialReviews' ")
  getSocialSignals(bookId: ID!, shelfStatus: [ShelfStatus]!): [SocialSignal]
  getTaggedBooks(pagination: PaginationInput, tagName: String!): TaggedBooksConnection
  getTopList(getTopListInput: GetTopListInput, pagination: PaginationInput): TopListConnection
  getUser(pagination: PaginationInput, userUri: ID): User
  getUserSponsoredGiveaways(legacyUserId: ID, pagination: PaginationInput, userUri: ID): GiveawaysConnection
  getViewer: User
  getWorkCommunityRatings(input: WorkCommunityRatingsInput!, pagination: PaginationInput): CommunityRatingsConnection
  getWorkCommunitySignals(input: WorkSocialSignalsInput!): [WorkSocialSignal]
  getWorkQuestions(discussionInput: DiscussionInput!, pagination: PaginationInput): ResourceQuestionsConnection
  getWorkQuotes(discussionInput: DiscussionInput!, pagination: PaginationInput): ResourceQuotesConnection
  getWorksByContributor(getWorksByContributorInput: GetWorksByContributorInput!, pagination: PaginationInput): ContributorWorksConnection
  getWorksForSeries(getWorksForSeriesInput: GetWorksForSeriesInput!, pagination: PaginationInput): SeriesWorksConnection
  getWorkSocialRatings(input: WorkSocialRatingsInput!, pagination: PaginationInput): WorkSocialRatingsConnection
  getWorkSocialReviews(input: WorkSocialReviewsInput!, pagination: PaginationInput): WorkSocialReviewsConnection
  getWorkSocialShelvings(input: WorkSocialShelvingsInput!, pagination: PaginationInput): WorkSocialShelvingsConnection
  getWorkSocialSignals(input: WorkSocialSignalsInput!): [WorkSocialSignal]
  getWorkTopics(discussionInput: DiscussionInput!, pagination: PaginationInput): ResourceTopicsConnection
}

type Question implements Node {
  id: ID!
}

type Quote implements Node {
  id: ID!
}

input RateBookInput {
  id: ID!
  rating: Int!
}

type RateBookPayload {
  review: Review
}

type RatingsSocialSignal implements WorkSocialSignal {
  count: Int!
  edges: [SocialSignalUserEdge]!
  rating: Int!
}

type ReadingProgressUpdate {
  currentPosition: Int!
  finalPosition: Int!
  positionType: PositionType!
}

type RelatedTagsList {
  duplicateTags: [Tag]
  relatedTags: [Tag]
}

type ResourceCommentsConnection implements Connection {
  edges: [ResourceCommentsEdge]
  pageInfo: PageInfo!
  totalCount: Int
  viewerCanComment: Boolean
}

type ResourceCommentsEdge implements Edge {
  node: Comment!
}

type ResourceQuestionsConnection implements Connection {
  edges: [ResourceQuestionsEdge]
  pageInfo: PageInfo!
  totalCount: Int
  webUrl: String
}

type ResourceQuestionsEdge implements Edge {
  node: Question!
}

type ResourceQuotesConnection implements Connection {
  edges: [ResourceQuotesEdge]
  pageInfo: PageInfo!
  totalCount: Int
  webUrl: String
}

type ResourceQuotesEdge implements Edge {
  node: Quote!
}

type ResourceTopicsConnection implements Connection {
  edges: [ResourceTopicsEdge]
  pageInfo: PageInfo!
  totalCount: Int
  webUrl: String
}

type ResourceTopicsEdge implements Edge {
  node: Topic!
}

type Review implements Node & Likable & Commentable {
  book: Book!
  commentCount: Int
  comments(pagination: PaginationInput): ResourceCommentsConnection
  createdAt: Float
  creator: User!
  id: ID!
  lastRevisionAt: Float
  likeCount: Int
  rating: Int
  recommendFor: String
  shelving: Shelving
  spoilerStatus: Boolean
  text: String
  updatedAt: Float
  viewerHasLiked: Boolean
}

type ReviewEdge implements Edge {
  node: Review!
}

enum ReviewFilterResourceType {
  BOOK
  WORK
}

type SchemaHealth {
  adsTargetingServiceDataSource: DataSourceHealth
  editorialLambdaDataSource: DataSourceHealth
  flaggingLambdaDataSource: DataSourceHealth
  goodreadsP13NLambdaDataSource: DataSourceHealth
  monolithDataSource: DataSourceHealth
  nativeAdsServiceDataSource: DataSourceHealth
  notificationServiceDataSource: DataSourceHealth
  rasFollowServiceDataSource: DataSourceHealth
  rasVotingServiceDataSource: DataSourceHealth
  reviewsLambdaDataSource: DataSourceHealth
  reviewsServiceDataSource: DataSourceHealth
  searchServiceDataSource: DataSourceHealth
  shelvesLambdaDataSource: DataSourceHealth
  socialLambdaDataSource: DataSourceHealth
  toplistServiceDataSource: DataSourceHealth
}

type SearchBookEdge implements Edge & SearchResultEdge {
  node: Book!
  rank: Int
}

interface SearchResultEdge {
  rank: Int
}

type SearchResultsConnection {
  edges: [SearchResultEdge]
  totalCount: Int
}

type Series implements Node {
  id: ID!
  title: String
  webUrl: String
}

type SeriesWorksConnection implements Connection {
  edges: [SeriesWorksEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type SeriesWorksEdge implements Edge {
  isPrimary: Boolean
  node: Work!
  seriesPlacement: String!
}

type Shelf {
  id: ID
  legacyId: Int
  name: String
  webUrl: String
}

enum ShelfName {
  CURRENTLY_READING
  OTHER
  READ
  TO_READ
}

enum ShelfStatus {
  ALL
  CURRENTLY_READING
  TO_READ
}

input ShelveBookInput {
  id: ID!
  shelfName: String!
}

type ShelveBookPayload {
  shelving: Shelving
}

type ShelvesAndTags {
  shelves: [Shelf]
  tags: [Tag]
}

type Shelving implements Node {
  book: Book
  createdAt: Float
  creator: User
  id: ID!
  legacyId: String
  review: Review
  shelf: Shelf
  taggings: [Tagging]
  updatedAt: Float
  webUrl: String
}

type ShelvingEdge implements Edge {
  node: Shelving!
}

type ShelvingsSocialSignal implements WorkSocialSignal {
  count: Int!
  edges: [SocialSignalUserEdge]!
  shelfName: ShelfName!
}

type SimilarBooksConnection implements Connection {
  edges: [SimilarBooksEdge]
  pageInfo: PageInfo!
  totalCount: Int
  webUrl: String!
}

type SimilarBooksEdge implements Edge {
  node: Book!
}

type SiteHeaderBanner {
  altText: String
  clickthroughUrl: String
  desktop1xPhoto: String
  desktop2xPhoto: String
  mobile1xPhoto: String
  mobile2xPhoto: String
  siteStripColor: String
}

type SocialSignal {
  count: Int!
  name: ShelfStatus!
  users: [SocialSignalUserEdge]!
}

type SocialSignalUserEdge implements Edge {
  node: User!
}

type Tag {
  name: String!
  webUrl: String
}

input TagBookInput {
  id: ID!
  tagsToApply: [String]
  tagsToRemove: [String]
}

type TagBookPayload {
  taggings: [Tagging]
}

type TaggedBookEdge implements Edge {
  node: Book!
  reviewCounts: Int
}

type TaggedBooksConnection implements Connection {
  edges: [TaggedBookEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type Tagging {
  id: ID
  tag: Tag
}

type TextReviewLanguageCount {
  count: Int
  isoLanguageCode: String
}

type Topic implements Node {
  id: ID!
}

type TopListBookEdge implements Edge & TopListEdge {
  count: Int
  node: Book!
  rank: Int!
}

type TopListConnection implements Connection {
  edges: [Edge]
  location: String!
  name: String!
  pageInfo: PageInfo!
  period: String!
  totalCount: Int
}

interface TopListEdge {
  count: Int
  rank: Int!
}

type TopListUserEdge implements Edge & TopListEdge {
  count: Int
  node: User!
  rank: Int!
}

type TopListWorkEdge implements Edge & TopListEdge {
  count: Int
  node: Work!
  rank: Int!
}

input UnblockUserInput {
  id: ID!
}

type UnblockUserPayload {
  isSuccessful: Boolean!
}

input UnfollowContributorInput {
  id: ID!
}

type UnfollowContributorPayload {
  isSuccessful: Boolean!
}

input UnfollowUserInput {
  legacyUserId: ID!
}

type UnfollowUserPayload {
  isSuccessful: Boolean!
}

input UnfriendUserInput {
  legacyUserId: ID!
}

type UnfriendUserPayload {
  isSuccessful: Boolean!
}

input UnmarkBookNotInterestedInput {
  bookId: ID!
}

type UnmarkBookNotInterestedPayload {
  isSuccessful: Boolean!
}

input UnrateBookInput {
  id: ID!
}

type UnrateBookPayload {
  review: Review
}

input UnshelveBookInput {
  id: ID!
}

type UnshelveBookPayload {
  isSuccessful: Boolean!
}

type User implements Node {
  badgeList: [String]
  contributor: Contributor
  currentlyReadingBooks: UserCurrentlyReadingBooksConnection
  favoriteGenres: UserGenresConnection
  followersCount: Int
  friendsCount: Int
  id: ID!
  imageUrl: String
  imageUrlSquare: String
  isAuthor: Boolean
  legacyId: Int!
  name: String
  navigationQuickLinks: [NavigationQuickLink!]!
  ratingsCount: Int
  readingChallengeUrl: String
  reviewsCount: Int
  shelvesAndTags(maxShelves: Int, maxTags: Int): ShelvesAndTags
  textReviewsCount: Int
  viewerFriendRequestsUnreadCount: Int
  viewerMessagesUnreadCount: Int
  viewerNotifications(pagination: PaginationInput): NotificationsConnection
  viewerNotificationsUnreadCount: Int
  viewerRelationshipStatus: ViewerRelationshipStatus
  webUrl: String
}

type UserCurrentlyReadingBookEdge implements Edge {
  node: Book!
  progressUpdate: ReadingProgressUpdate!
}

type UserCurrentlyReadingBooksConnection implements Connection {
  edges: [UserCurrentlyReadingBookEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserGenreEdge implements Edge {
  node: Genre!
}

type UserGenresConnection implements Connection {
  edges: [UserGenreEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserTargetingSettings {
  allowBehavioralTargeting: Boolean
}

type ViewerRelationshipStatus {
  isBlockedByViewer: Boolean
  isFollowing: Boolean
  isFriend: Boolean
}

type Work implements Node {
  bestBook: Book!
  choiceAwards: [Award]
  details: WorkDetails
  editions(pagination: PaginationInput): BooksConnection
  featuredKNH: FeaturedKNHCollectionConnection
  giveaways: GiveawaysConnection
  id: ID!
  legacyId: Int!
  questions(pagination: PaginationInput): ResourceQuestionsConnection
  quotes(pagination: PaginationInput): ResourceQuotesConnection
  reviews(filters: BookReviewsFilterInput, pagination: PaginationInput): BookReviewsConnection
  socialSignals: [WorkSocialSignal]
  stats: BookOrWorkStats
  topics(pagination: PaginationInput): ResourceTopicsConnection
  viewerShelvings: [Shelving]
  viewerShelvingsUrl: String
}

input WorkCommunityRatingsInput {
  rating: Int!
  workId: ID!
}

type WorkDetails {
  awardsWon: [Award]
  bestBook: Book @deprecated(reason: "Use `Work.bestBook`.")
  booksCount: Int
  characters: [Character]
  originalTitle: String
  places: [Places]
  publicationTime: Float
  publishers: [String]
  shelvesUrl: String
  webUrl: String
}

type WorkSocialRatingsConnection implements Connection {
  edges: [ShelvingEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

input WorkSocialRatingsInput {
  rating: Int!
  workId: ID!
}

type WorkSocialReviewsConnection implements Connection {
  edges: [ReviewEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

input WorkSocialReviewsInput {
  workId: ID!
}

type WorkSocialShelvingsConnection implements Connection {
  edges: [ShelvingEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

input WorkSocialShelvingsInput {
  shelfName: ShelfName!
  workId: ID!
}

interface WorkSocialSignal {
  count: Int!
  edges: [SocialSignalUserEdge]!
}

input WorkSocialSignalsInput {
  workId: ID!
}
